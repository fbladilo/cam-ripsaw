- name: Check that velero_aws_credentials were created
  stat:
    path: "{{ playbook_dir }}/velero_aws_creds.yml"
  register: creds

- name: Create new S3 bucket if was not created
  block:

    - name: Get AWS account information
      aws_caller_facts:
      register: caller_facts

    - set_fact:
        random: "{{ 100000 | random }}"

    # Add randomization to arn_and_region to ensure uniquess within a region
    - name: Retrieve AWS account identifier (ARN) for use in resource tags
      set_fact:
        aws_account_arn: "{{ caller_facts.arn }}"
        arn_and_region: "{{ caller_facts.arn }}-{{ aws_region }}-{{ random }}"

    - set_fact:
        aws_resource_name: "velero-ripsaw-{{ arn_and_region | hash('md5') }}"

    - debug:
        msg: "Will create s3 bucket : {{ aws_resource_name }}"

    - name: Create S3 bucket for backup storage of OpenShift resource definitions
      s3_bucket:
        state: present
        name: "{{ aws_resource_name }}"
        tags:
          owner: "{{ aws_account_arn }}"

    - name: Create IAM user for Velero to assume role of
      iam_user:
        state: present
        name: "{{ aws_resource_name }}"

    - name: Create IAM policy entitling Velero user access to S3 bucket and EBS volume storage
      iam_policy:
        state: present
        iam_type: user
        iam_name: "{{ aws_resource_name }}"
        policy_name: "{{ aws_resource_name }}"
        policy_json: "{{ lookup( 'template', 'velero_policy.json.j2') }}"

    - name: Get AWS access key info for Velero IAM user
      iam:
        iam_type: user
        name: "{{ aws_resource_name }}"
        state: present
      register: iam_result

    - name: Remove existing AWS access keys for Velero IAM user
      iam:
        iam_type: user
        name: "{{ aws_resource_name }}"
        state: update
        access_key_ids: "{{ item.access_key_id }}"
        access_key_state: remove
      loop: "{{ iam_result.user_meta.access_keys }}"

    - name: Create new AWS access keys for Velero IAM user
      iam:
        iam_type: user
        name: "{{ aws_resource_name }}"
        state: update
        access_key_state: create
      register: iam_result

    - name: Store new AWS access keys
      set_fact:
        velero_aws_access_key: "{{ iam_result.created_keys[0].access_key_id }}"
        velero_aws_secret_key: "{{ iam_result.created_keys[0].secret_access_key }}"

    - name: Write Velero AWS access keys to config/velero_aws_creds.yml
      template:
        src: velero_aws_creds.yml.j2
        dest: "{{ playbook_dir }}/velero_aws_creds.yml"
  when: not creds.stat.exists
